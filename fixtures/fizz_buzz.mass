ExitProcess :: (status : s32) -> (s64) external("kernel32.dll", "ExitProcess")
GetStdHandle :: (handle : s32) -> (s64) external("kernel32.dll", "GetStdHandle")
WriteFile :: (
  status : s64,
  buffer : [u8],
  size : s32,
  bytes_written : s64,
  overlapped : s64
) -> (s64) external("kernel32.dll", "WriteFile")

fn print(integer : s64) {
  const count = {
    mut count = 0
    for mut temp = integer ; temp ; temp = temp / 10 {
      count = count + 1
    }
    if count then count else 1
  }

  stack buffer u8[64]
  const output_size = {
    if integer < 0 then {
      static minus_code = 0x2d
      buffer.0 = minus_code
      integer = 0 - integer
      count + 1
    } else {
      count
    }
  }

  for mut integer_index = 0 ; integer_index < count ; {
    integer_index = integer_index + 1
    const digit = cast(u8, integer % 10)
    const digit_index = output_size - integer_index
    static zero_code = 0x30
    buffer.(digit_index) = zero_code + digit
    integer = integer / 10
  }
  WriteFile(GetStdHandle(-11), &buffer, cast(s32, output_size), 0, 0)
}

fn fizz_buzz() {
  const stdout_handle = GetStdHandle(-11)
  for i : s8 = 1; i <= 100; i = i + 1 {
    mut print_number = true
    if (i % 3 == 0) {
      print_number = false
      WriteFile(stdout_handle, c_string("fizz"), 4, 0, 0)
    }
    if (i % 5 == 0) {
      print_number = false
      WriteFile(stdout_handle, c_string("buzz"), 4, 0, 0)
    }
    if (print_number) {
      print(i)
    }
    WriteFile(stdout_handle, c_string(" "), 1, 0, 0)
  }
}

fn main () {
  fizz_buzz()
  ExitProcess(0)
}
