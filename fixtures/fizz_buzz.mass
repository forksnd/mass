fn ExitProcess(status : s32) -> (s64) external("kernel32.dll", "ExitProcess")
fn GetStdHandle(handle : s32) -> (s64) external("kernel32.dll", "GetStdHandle")
fn WriteFile(
  status : s64,
  buffer : [u8],
  size : s32,
  bytes_written : s64,
  overlapped : s64
) -> (s64) external("kernel32.dll", "WriteFile")

cached_stdout_handle := 0
startup(fn() {
  cached_stdout_handle = GetStdHandle(-11)
})

macro print(string : String) -> () {
  WriteFile(cached_stdout_handle, string.bytes, cast(s32, string.length), 0, 0)
}

fn print(integer : s64) {
  const count = {
    mut count = 0
    for mut temp = integer ; temp ; temp = temp / 10 {
      count = count + 1
    }
    if count then count else 1
  }

  stack buffer u8[64]
  const output_size = if integer < 0 then {
    static minus_code = "-".bytes.0
    buffer.0 = minus_code
    integer = 0 - integer
    count + 1
  } else {
    count
  }

  for mut integer_index = 0 ; integer_index < count ; {
    integer_index = integer_index + 1
    const digit = cast(u8, integer % 10)
    const digit_index = output_size - integer_index
    static zero_code = "0".bytes.0
    buffer.(digit_index) = zero_code + digit
    integer = integer / 10
  }
  WriteFile(cached_stdout_handle, &buffer, cast(s32, output_size), 0, 0)
}

fn fizz_buzz() {
  for i : s8 = 1; i <= 100; i = i + 1 {
    mut print_number = true
    if (i % 3 == 0) {
      print_number = false
      print("fizz")
    }
    if (i % 5 == 0) {
      print_number = false
      print("buzz")
    }
    if (print_number) {
      print(i)
    }
    print(" ")
  }
}

fn main() {
  fizz_buzz()
  ExitProcess(0)
}
