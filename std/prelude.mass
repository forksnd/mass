MASS :: import("mass")

cast :: fn(type : Type, value) -> _ MASS.cast
zero_extend :: fn(type : Type, value) -> _ MASS.zero_extend

is_integer_type :: MASS.constraint_integer_type
is_float_type :: MASS.constraint_float_type
is_pointer_type :: MASS.constraint_pointer_type
is_fixed_array_type :: MASS.constraint_fixed_array_type
is_struct_type :: MASS.constraint_struct_type
is_function_instance_type :: MASS.constraint_function_instance_type

get :: fn(string : String, offset : i64) -> (i8) {
  using unsigned
  assert(offset < string.length);
  unchecked_get_at_index(string.bytes, offset)
}
get :: fn(string : String, offset : i64) => (i8) {
  get(string, offset)
}

// TODO runtime version should be implemented in the userland
unchecked_get_at_index :: fn(
  x ~ is_pointer_type,
  offset : i64
) -> ((x.*).Pointer_To.descriptor) MASS.unchecked_get_at_index
unchecked_get_at_index :: fn(
  x ~ is_pointer_type,
  offset : i64
) => ((x.*).Pointer_To.descriptor) MASS.unchecked_get_at_index

get :: fn(x ~ is_struct_type, rhs) -> _ MASS.struct_get
get :: fn(x ~ is_fixed_array_type, rhs) -> _ MASS.unchecked_get_at_index
get :: fn(x : Type, name : MASS.Symbol) -> _ MASS.get_from_descriptor_module

// Auto-dereferencing pointers. This is a very generic fn, meaning that a user can easily
// create a more specic overload even for pointer types.
get :: fn(x ~ is_pointer_type, rhs) -> _ intrinsic {
  sliced_args := arguments
  sliced_args.length = cast(i32, 1)
  deref := MASS.dereference(context, parser, sliced_args)
  arguments.values.* = deref
  MASS.get(context, parser, arguments)
}

Never :: &MASS.Descriptor[
  .tag = .Never,
  .brand = 0,
  .own_module = 0,
  .bit_size = [0],
  .bit_alignment = [0],
  .Pointer_To = [0], // @Hack for C unions
]
make_never :: fn(allocator : &Allocator, source_range : &MASS.Source_Range) -> (&MASS.Value) {
  value := allocate(allocator, MASS.Value)
  value.source_range = source_range.*
  value.tag = .Forced
  value.descriptor = Never
  value.Forced.storage.tag = .Immediate
  value.Forced.storage.bit_size = [0]
  value
}


Void :: type_of(())
make_void :: fn(allocator : &Allocator, source_range : &MASS.Source_Range) -> (&MASS.Value) {
  value := allocate(allocator, MASS.Value)
  value.source_range = source_range.*
  value.tag = .Forced
  value.descriptor = Void
  value.Forced.storage.tag = .Immediate
  value.Forced.storage.bit_size = [0]
  value
}

unreachable :: fn() -> (Never) intrinsic {
  lazy_value_proc :: fn(
    context : &MASS.Context,
    builder : &MASS.Function_Builder,
    expected_result : &MASS.Expected_Result,
    scope : &MASS.Scope,
    source_range : &MASS.Source_Range,
    payload : &Void
  ) -> (&MASS.Value) {
    MASS.push_instruction(&builder.code_block, MASS.Instruction [
      .tag = .Location,
      .scope = scope,
      .Location = [source_range.*]
    ]);

    {
      instruction : MASS.Instruction
      instruction.tag = .Bytes
      instruction.Bytes.memory.0 = 0xCC
      instruction.Bytes.length = 1
      instruction.scope = scope
      MASS.push_instruction(&builder.code_block, instruction);
    }

    make_never(context.allocator, source_range)
  }

  lazy_value := allocate(context.allocator, MASS.Value)
  lazy_value.* = [
    .tag = .Lazy,
    .flags = .None,
    .descriptor = Never,
    .source_range = arguments.source_range,
    .Lazy = [
      .is_factory = false,
      .scope = parser.scope,
      .epoch = parser.epoch,
      .proc = lazy_value_proc,
      .payload = 0,
    ],
  ]

  lazy_value
}

true :: cast(bool, 1)
false :: cast(bool, 0)

assert :: fn(condition : bool, message := "Assertion failed\n") -> () {
  // TODO add something like MASS.intrinsic_assert or MASS.intrinsic_print
  //      that would be safe to call without a risk or circular dependencies
  // TODO also detect these kind of dependencies better
  //io :: import("std/io")
  if condition then {} else {
    //io.print(message)
    unreachable()
  }
}

get :: fn(view : MASS.Value_View, index : i64) -> (&MASS.Value) {
  assert(MASS.i64_unsigned_less_equal(index, 0xFFFF_FFFF))
  unchecked_get_at_index(view.values, index)
}

static_assert :: fn(condition : bool, message : String = "") => () MASS.static_assert

pointer_to :: fn(type : Type) => (Type) MASS.pointer_to_type
pointer_to :: fn(x) -> _ MASS.pointer_to

MASS_I64_MATH :: module {
  add :: MASS.i64_add
  subtract :: MASS.i64_subtract
  signed_multiply :: MASS.i64_signed_multiply
  unsigned_multiply :: MASS.i64_unsigned_multiply
  signed_divide :: MASS.i64_signed_divide
  unsigned_divide :: MASS.i64_unsigned_divide
  signed_remainder :: MASS.i64_signed_remainder
  unsigned_remainder :: MASS.i64_unsigned_remainder

  signed_less :: MASS.i64_signed_less
  unsigned_less :: MASS.i64_unsigned_less
  signed_less_equal :: MASS.i64_signed_less_equal
  unsigned_less_equal :: MASS.i64_unsigned_less_equal
  signed_greater :: MASS.i64_signed_greater
  unsigned_greater :: MASS.i64_unsigned_greater
  signed_greater_equal :: MASS.i64_signed_greater_equal
  unsigned_greater_equal :: MASS.i64_unsigned_greater_equal

  negate :: fn(x : i64) -> (i64) { MASS.i64_subtract(0, x) }

  logical_shift_left :: MASS.i64_logical_shift_left
  logical_shift_right :: MASS.i64_logical_shift_right
  bitwise_or :: MASS.i64_bitwise_or
  bitwise_and :: MASS.i64_bitwise_and
}


add :: fn(x : i64, y : i64) => (i64) { MASS.i64_add(x, y) }
subtract :: fn(x : i64, y : i64) => (i64) { MASS.i64_subtract(x, y) }
signed_multiply :: fn(x : i64, y : i64) => (i64) { MASS.i64_signed_multiply(x, y) }
unsigned_multiply :: fn(x : i64, y : i64) => (i64) { MASS.i64_unsigned_multiply(x, y) }
signed_divide :: fn(x : i64, y : i64) => (i64) { MASS.i64_signed_divide(x, y) }
unsigned_divide :: fn(x : i64, y : i64) => (i64) { MASS.i64_unsigned_divide(x, y) }
signed_remainder :: fn(x : i64, y : i64) => (i64) { MASS.i64_signed_remainder(x, y) }
unsigned_remainder :: fn(x : i64, y : i64) => (i64) { MASS.i64_unsigned_remainder(x, y) }

signed_less :: fn(x : i64, y : i64) => (bool) { MASS.i64_signed_less(x, y) }
unsigned_less :: fn(x : i64, y : i64) => (bool) { MASS.i64_unsigned_less(x, y) }
signed_less_equal :: fn(x : i64, y : i64) => (bool) { MASS.i64_signed_less_equal(x, y) }
unsigned_less_equal :: fn(x : i64, y : i64) => (bool) { MASS.i64_unsigned_less_equal(x, y) }
signed_greater :: fn(x : i64, y : i64) => (bool) { MASS.i64_signed_greater(x, y) }
unsigned_greater :: fn(x : i64, y : i64) => (bool) { MASS.i64_unsigned_greater(x, y) }
signed_greater_equal :: fn(x : i64, y : i64) => (bool) { MASS.i64_signed_greater_equal(x, y) }
unsigned_greater_equal :: fn(x : i64, y : i64) => (bool) { MASS.i64_unsigned_greater_equal(x, y) }

negate :: fn(x : i64) => (i64) { MASS.i64_subtract(0, x) }

logical_shift_left :: fn(x : i64, y : i64) => (i64) { MASS.i64_logical_shift_left(x, y) }
logical_shift_right :: fn(x : i64, y : i64) => (i64) { MASS.i64_logical_shift_right(x, y) }
bitwise_or :: fn(x : i64, y : i64) => (i64) { MASS.i64_bitwise_or(x, y) }
bitwise_and :: fn(x : i64, y : i64) => (i64) { MASS.i64_bitwise_and(x, y) }

make_arithmetic_operations_module :: fn(@type : Type) => (MASS.Module) {
  module {
    add :: fn(x : type, y : type) -> (type) MASS.integer_add
    subtract :: fn(x : type, y : type) -> (type) MASS.integer_subtract
    multiply :: fn(x : type, y : type) -> (type) MASS.integer_multiply
    divide :: fn(x : type, y : type) -> (type) MASS.integer_divide
    remainder :: fn(x : type, y : type) -> (type) MASS.integer_remainder
    negate :: fn(x : type) -> (type) { 0 - x }

    less :: fn(x : type, y : type) -> (bool) MASS.integer_less
    less_equal :: fn(x : type, y : type) -> (bool) MASS.integer_less_equal
    greater :: fn(x : type, y : type) -> (bool) MASS.integer_greater
    greater_equal :: fn(x : type, y : type) -> (bool) MASS.integer_greater_equal
    equal :: fn(x : type, y : type) -> (bool) MASS.integer_equal
    not_equal :: fn(x : type, y : type) -> (bool) MASS.integer_not_equal
  }
}

using make_arithmetic_operations_module(s8)
using make_arithmetic_operations_module(s16)
using make_arithmetic_operations_module(s32)
using make_arithmetic_operations_module(s64)
using make_arithmetic_operations_module(u8)
using make_arithmetic_operations_module(u16)
using make_arithmetic_operations_module(u32)
using make_arithmetic_operations_module(u64)

x86_64 :: module {
  REX_B :: 0b0001 // Extension of the ModR/M r/m field, SIB base field, or Opcode reg field
  REX_X :: 0b0010 // Extension of the SIB index field
  REX_R :: 0b0100 // Extension of the ModR/M reg field
  REX_W :: 0b1000 // 0 = Storage size determined by CS.D; 1 = 64 Bit Storage Size

  Register :: MASS.Register
  Instruction :: MASS.Instruction

  op1_reg64_reg64_mr :: fn(op_code : i8, target : Register, source : Register) -> (Instruction) {
    using MASS_I64_MATH

    lhs_reg_index := zero_extend(i64, target)
    rhs_reg_index := zero_extend(i64, source)

    rex := 0x40 + REX_W
    rex = if lhs_reg_index & 0b1000 != 0 then rex + REX_B else rex
    rex = if rhs_reg_index & 0b1000 != 0 then rex + REX_R else rex

    mod_reg_rm := cast(i8, (0b11 << 6) | ((rhs_reg_index & 0b111) << 3) | (lhs_reg_index & 0b111))

    instruction : Instruction
    instruction.tag = .Bytes
    instruction.Bytes.memory.0 = cast(i8, rex)
    instruction.Bytes.memory.1 = op_code
    instruction.Bytes.memory.2 = mod_reg_rm
    instruction.Bytes.length = 3
    instruction
  }
}

add_or_subtract :: fn(
  context : &MASS.Context,
  parser : &MASS.Parser,
  arguments : MASS.Value_View,
  op_code : i8
) -> (&MASS.Value) {
  meta :: import("std/meta")

  Payload :: c_struct [ lhs : &MASS.Value, rhs : &MASS.Value, op_code : i8 ]

  lazy_value_proc :: fn(
    context : &MASS.Context,
    builder : &MASS.Function_Builder,
    expected_result : &MASS.Expected_Result,
    scope : &MASS.Scope,
    source_range : &MASS.Source_Range,
    raw_payload : &Void
  ) -> (&MASS.Value) {
    payload := cast(&Payload, raw_payload)
    temp_lhs_storage := MASS.storage_register_temp(builder, [64]);
    temp_lhs_register := temp_lhs_storage.Register.index
    expected_lhs := MASS.expected_result_exact_type(i64, temp_lhs_storage)

    temp_lhs := MASS.value_force(context, builder, scope, &expected_lhs, payload.lhs)

    if context.compilation.result.tag != .Success then {
      return 0
    }

    temp_rhs_storage := MASS.storage_register_temp(builder, [64]);
    temp_rhs_register := temp_rhs_storage.Register.index
    expected_rhs := MASS.expected_result_exact_type(i64, temp_rhs_storage)

    temp_rhs := MASS.value_force(context, builder, scope, &expected_rhs, payload.rhs)

    if context.compilation.result.tag != .Success then {
      return 0
    }

    MASS.push_instruction(&builder.code_block, [
      .tag = .Location,
      .scope = scope,
      .Location = [source_range.*]
    ]);

    {
      instruction := x86_64.op1_reg64_reg64_mr(payload.op_code, temp_lhs_register, temp_rhs_register)
      MASS.push_instruction(&builder.code_block, instruction);
    }

    MASS.register_release(builder, temp_rhs_register);

    temp_lhs
  }

  payload := allocate(context.allocator, Payload)
  payload.* = [arguments.0, arguments.1, op_code]

  lazy_value := allocate(context.allocator, MASS.Value)
  lazy_value.* = [
    .tag = .Lazy,
    .flags = .None,
    .descriptor = type_descriptor(i64),
    .source_range = arguments.source_range,
    .Lazy = [
      .is_factory = false,
      .scope = parser.scope,
      .epoch = parser.epoch,
      .proc = lazy_value_proc,
      .payload = cast(&Void, payload),
    ],
  ]

  lazy_value
}

add :: fn(x : i64, y : i64) -> (i64) intrinsic {
  add_or_subtract(context, parser, arguments, 0x01)
}

subtract :: fn(x : i64, y : i64) -> (i64) intrinsic {
  add_or_subtract(context, parser, arguments, 0x29)
}

compare :: fn(
  context : &MASS.Context,
  parser : &MASS.Parser,
  arguments : MASS.Value_View,
  compare_type : MASS.Compare_Type
) -> (&MASS.Value) {
  meta :: import("std/meta")

  Payload :: c_struct [ lhs : &MASS.Value, rhs : &MASS.Value, compare_type : MASS.Compare_Type ]

  lazy_value_proc :: fn(
    context : &MASS.Context,
    builder : &MASS.Function_Builder,
    expected_result : &MASS.Expected_Result,
    scope : &MASS.Scope,
    source_range : &MASS.Source_Range,
    raw_payload : &Void
  ) -> (&MASS.Value) {
    payload := cast(&Payload, raw_payload)

    temp_lhs_storage := MASS.storage_register_temp(builder, [64]);
    temp_lhs_register := temp_lhs_storage.Register.index
    expected_lhs := MASS.expected_result_exact_type(i64, temp_lhs_storage)
    temp_lhs := MASS.value_force(context, builder, scope, &expected_lhs, payload.lhs)

    if context.compilation.result.tag != .Success then {
      return 0
    }

    temp_rhs_storage := MASS.storage_register_temp(builder, [64]);
    temp_rhs_register := temp_rhs_storage.Register.index
    expected_rhs := MASS.expected_result_exact_type(i64, temp_rhs_storage)
    temp_rhs := MASS.value_force(context, builder, scope, &expected_rhs, payload.rhs)

    if context.compilation.result.tag != .Success then {
      return 0
    }

    MASS.push_instruction(&builder.code_block, [
      .tag = .Location,
      .scope = scope,
      .Location = [source_range.*],
    ])

    {
      instruction := x86_64.op1_reg64_reg64_mr(0x39, temp_lhs_register, temp_rhs_register)
      MASS.push_instruction(&builder.code_block, instruction)
    }

    MASS.register_release(builder, temp_rhs_register)
    MASS.register_release(builder, temp_lhs_register)

    value := allocate(context.allocator, MASS.Value)
    value.* = [
      .tag = .Forced,
      .flags = .None,
      .descriptor = type_descriptor(bool),
      .source_range = source_range.* ,
      .Forced = [.storage = [
        .tag = .Eflags,
        .flags = .None,
        .bit_size = value.descriptor.bit_size,
        .Eflags = [payload.compare_type]
      ]]
    ]
    value
  }

  payload := allocate(context.allocator, Payload)
  payload.* = [arguments.0, arguments.1, compare_type]

  lazy_value := allocate(context.allocator, MASS.Value)
  lazy_value.* = [
    .tag = .Lazy,
    .flags = .None,
    .descriptor = type_descriptor(bool),
    .source_range = arguments.source_range,
    .Lazy = [
      .is_factory = false,
      .epoch = parser.epoch,
      .scope = parser.scope,
      .proc = lazy_value_proc,
      .payload = cast(&Void, payload)
    ]
  ]
  lazy_value
}

make_i64_comparison_fn :: fn(@compare_type : MASS.Compare_Type) => _ {
  fn(x : i64, y : i64) -> (bool) intrinsic {
    compare(context, parser, arguments, compare_type)
  }
}

unsigned_less :: make_i64_comparison_fn(MASS.Compare_Type.Unsigned_Below)
unsigned_less_equal :: make_i64_comparison_fn(MASS.Compare_Type.Unsigned_Below_Equal)
unsigned_greater :: make_i64_comparison_fn(MASS.Compare_Type.Unsigned_Above)
unsigned_greater_equal :: make_i64_comparison_fn(MASS.Compare_Type.Unsigned_Above_Equal)

signed_less :: make_i64_comparison_fn(MASS.Compare_Type.Less)
signed_less_equal :: make_i64_comparison_fn(MASS.Compare_Type.Less_Equal)
signed_greater :: make_i64_comparison_fn(MASS.Compare_Type.Greater)
signed_greater_equal :: make_i64_comparison_fn(MASS.Compare_Type.Greater_Equal)
equal :: fn(x : i64, y : i64) -> (bool) MASS.generic_equal
not_equal :: fn(x : i64, y : i64) -> (bool) MASS.generic_not_equal
equal :: fn(x : i64, y : i64) => (bool) { equal(x, y) }
not_equal :: fn(x : i64, y : i64) => (bool) { not_equal(x, y) }

unsigned :: module {
  less :: unsigned_less
  less_equal :: unsigned_less_equal
  greater :: unsigned_greater
  greater_equal :: unsigned_greater_equal
}

signed :: module {
  less :: signed_less
  less_equal :: signed_less_equal
  greater :: signed_greater
  greater_equal :: signed_greater_equal
}

equal :: fn(x, y : x) -> (bool) MASS.generic_equal
not_equal :: fn(x, y : x) -> (bool) MASS.generic_not_equal
equal :: fn(x, y : x) => (bool) { equal(x, y) }
not_equal :: fn(x, y : x) => (bool) { not_equal(x, y) }

using {
  Bits :: MASS.Bits

  module {
    // FIXME there should be better way to provide conversions
    //       instead of combinatorial explosion of overloads

    // It is is bit awkward that the field is called `as_u64` but the type is actually `i64`
    less :: fn(x : Bits, y : Bits) => (bool) { unsigned_less(x.as_u64, y.as_u64) }
    less :: fn(x : Bits, y : i64) => (bool) { unsigned_less(x.as_u64, y) }
    less :: fn(x : i64, y : Bits) => (bool) { unsigned_less(x, y.as_u64) }

    less_equal :: fn(x : Bits, y : Bits) => (bool) { unsigned_less_equal(x.as_u64, y.as_u64) }
    less_equal :: fn(x : Bits, y : i64) => (bool) { unsigned_less_equal(x.as_u64, y) }
    less_equal :: fn(x : i64, y : Bits) => (bool) { unsigned_less_equal(x, y.as_u64) }

    greater :: fn(x : Bits, y : Bits) => (bool) { unsigned_greater(x.as_u64, y.as_u64) }
    greater :: fn(x : Bits, y : i64) => (bool) { unsigned_greater(x.as_u64, y) }
    greater :: fn(x : i64, y : Bits) => (bool) { unsigned_greater(x, y.as_u64) }

    greater_equal :: fn(x : Bits, y : Bits) => (bool) { unsigned_greater_equal(x.as_u64, y.as_u64) }
    greater_equal :: fn(x : Bits, y : i64) => (bool) { unsigned_greater_equal(x.as_u64, y) }
    greater_equal :: fn(x : i64, y : Bits) => (bool) { unsigned_greater_equal(x, y.as_u64) }
  }
}

Allocator :: MASS.Allocator

type_descriptor :: fn(type : Type) => (&MASS.Descriptor) {
  // :TypeStruct
  cast(&MASS.Descriptor, type)
}

type_descriptor :: fn(type : Type) -> (&MASS.Descriptor) {
  // :TypeStruct
  cast(&MASS.Descriptor, type)
}

allocate :: fn(allocator : &MASS.Allocator, @type : Type) -> _ {
  cast(&type, MASS.allocator_allocate_bytes(
    allocator,
    MASS.i64_unsigned_divide(type_descriptor(type).bit_size.as_u64, 8),
    MASS.i64_unsigned_divide(type_descriptor(type).bit_alignment.as_u64, 8)
  ))
}

Array :: fn(item_type : Type, length : i64) => (Type) intrinsic {
  meta :: import("std/meta")
  item_type := meta.reify(arguments.0, Type).*
  item_descriptor := type_descriptor(item_type)
  length := meta.reify(arguments.1, i64).*
  array_descriptor := allocate(context.allocator, MASS.Descriptor)

  raw_bit_size := MASS.i64_unsigned_multiply(item_descriptor.bit_size.as_u64, length)
  if MASS.i64_bitwise_and(raw_bit_size, 0xffff_ffff_8000_0000) != 0 then {
    error : MASS.Error
    error.tag = .Integer_Range
    error.source_range = arguments.source_range
    meta.context_error(context, error)
    return 0
  }

  array_descriptor.* = [
    .tag = .Fixed_Array,
    .brand = 0,
    .own_module = 0,
    .bit_size = [raw_bit_size],
    .bit_alignment = item_descriptor.bit_alignment,
    .Fixed_Array = [item_descriptor, length]
  ]

  type := Type[array_descriptor]

  meta.immediate(context.compilation, type, arguments.source_range)
}

multiply :: Array

Opaque :: fn(item_type : Type, name : String) => (Type) intrinsic {
  meta :: import("std/meta")
  item_type := meta.reify(arguments.0, Type).*
  name := meta.reify(arguments.1, String).*
  symbol := allocate(context.allocator, MASS.Symbol)
  symbol.* = [ .name = name ]
  descriptor := allocate(context.allocator, MASS.Descriptor)
  descriptor.* = type_descriptor(item_type)
  descriptor.brand = symbol

  type := Type[descriptor]
  meta.immediate(context.compilation, type, arguments.source_range)
}

c_enum :: fn(item_type : Type, tuple : MASS.Tuple) => (Type) intrinsic {
  meta :: import("std/meta")
  item_type := meta.reify(arguments.0, Type).*
  item_descriptor := type_descriptor(item_type)
  tuple := meta.reify(arguments.1, MASS.Tuple)

  enum_scope := MASS.scope_make_declarative(context.allocator, 0)
  enum_module := allocate(context.allocator, MASS.Module)
  enum_module.* = [
    .source_range = arguments.source_range,
    .own_scope = enum_scope,
    ."exports" = [
      .tag = .All,
      .scope = enum_scope,
      .source_range = arguments.source_range,
      .Selective = [0], // FIXME should not be necessary
    ]
  ]
  brand_symbol := allocate(context.allocator, MASS.Symbol)
  brand_symbol.* = [ .name = "FIXME" ] // Provide a better naming here
  descriptor := allocate(context.allocator, MASS.Descriptor)
  descriptor.* = [
    .tag = .Raw,
    .brand = brand_symbol,
    .own_module = enum_module,
    .bit_size = item_descriptor.bit_size,
    .bit_alignment = item_descriptor.bit_alignment,
    .Integer = [0], // FIXME should not be necessary
  ]

  {
    length := MASS.tuple_length(tuple)
    i := 0
    while i != length {
      item := MASS.tuple_get(tuple, i)
      assignment := meta.reify(item, MASS.Assignment)
      accessor := meta.reify(assignment.target, MASS.Named_Accessor)
      // FIXME check source descriptor
      // FIXME properly coerce the value instead of just replacing the descriptor
      // FIXME check that it is a compile-time value
      value := assignment.source
      value.descriptor = descriptor
      MASS.scope_define_value(enum_scope, [0], arguments.source_range, accessor.symbol, value)

      i = i + 1
    }
  }

  type := Type[descriptor]
  meta.immediate(context.compilation, type, arguments.source_range)
}

external :: fn(
  library_name : String,
  symbol_name : String
) => (MASS.External_Symbol) {
  [library_name, symbol_name]
}

Os :: MASS.Os
get_target_os :: fn() -> (Os) intrinsic {
  meta :: import("std/meta")
  meta.immediate(context.compilation, context.program.os, arguments.source_range)
}

// TODO move this to something like c_prelude_interop
length :: fn(array : [internal : &MASS.Dyn_Array_Internal]) -> (i64) { array.internal.length }

