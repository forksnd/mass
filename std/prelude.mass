syntax statement("while" ..@condition {}@body) {
  label _loop_start
  label placeholder _loop_done
  if condition() then {
    body(module {
      break :: ~> { goto _loop_done }
      continue :: ~> { goto _loop_start }
    })
    goto _loop_start
  } else {}
  label _loop_done
}

import :: fn(path : String) => (MASS.Scope) MASS.import
cast :: @fn(type : Type, value) MASS.cast
startup :: fn(callback : fn() -> ()) => () MASS.startup
eval :: @fn(curly : MASS.Group_Curly) MASS.eval
eval :: @fn(paren : MASS.Group_Paren) MASS.eval
fragment :: fn(curly : MASS.Group_Curly) => (MASS.Code_Fragment) MASS.fragment

Void :: type_of(())
debugger :: fn() => () intrinsic {
  lazy_value_proc :: fn(
    compilation : &MASS.Compilation,
    builder : &MASS.Function_Builder,
    expected_result : &MASS.Expected_Result,
    source_range : &MASS.Source_Range,
    payload : &Void
  ) -> (&MASS.Value) {
    {
      instruction : MASS.Instruction
      instruction.tag = MASS.Instruction_Tag.Location
      instruction.Location.source_range = source_range.*
    }

    {
      instruction : MASS.Instruction
      instruction.tag = MASS.Instruction_Tag.Bytes
      instruction.Bytes.memory.0 = 0xcc
      instruction.Bytes.length = 1
      MASS.push_instruction(&builder.code_block, instruction);
    }

    value : &MASS.Value = allocate(compilation.allocator, MASS.Value)
    value.source_range = source_range.*
    value.descriptor = Void
    value.storage.tag = MASS.Storage_Tag.None
    value.storage.bit_size = value.descriptor.bit_size
    value
  }


  lazy_value := allocate(context.allocator, MASS.Lazy_Value)
  lazy_value.epoch = context.epoch
  lazy_value.descriptor = Void
  lazy_value.proc = lazy_value_proc
  lazy_value.payload = 0

  meta :: import("std/meta")
  meta.static_value(context.compilation, lazy_value, arguments.source_range)
}


Symbol :: MASS.Symbol
true :: cast(bool, 1)
false :: cast(bool, 0)

assert :: fn(condition : bool, message := "Assertion failed\n") {
  io :: import("std/io")
  if condition then {} else {
    io.print(message)
    debugger()
  }
}

static_assert :: fn(condition : bool, message : String = "") => () MASS.static_assert

apply :: fn(symbol :: 'module, curly : MASS.Group_Curly) => (MASS.Scope) MASS.inline_module
apply :: fn(symbol :: 'exports, curly : MASS.Group_Curly) => () MASS.exports
apply :: @fn(symbol :: 'intrinsic, curly : MASS.Group_Curly) MASS.intrinsic
apply :: fn(symbol :: 'c_struct, curly : MASS.Group_Square) => (Type) MASS.c_struct

// These need to be an overload of `apply` instead a regular function because
// it needs to parse the expression inside with the runtime epoch even in the case
// when it is called from a constant context
apply :: fn(symbol :: 'type_of, paren : MASS.Group_Paren) => (Type) MASS.type_of
apply :: fn(symbol :: 'size_of, paren : MASS.Group_Paren) => (Type) MASS.size_of

apply :: macro(type, tuple : MASS.Group_Square) { cast(type', tuple') }
apply :: @fn(x, paren : MASS.Group_Paren) MASS.call

operator 7 (x == y) equal
operator 7 (x != y) not_equal

operator 8 (x < y) less
operator 8 (x > y) greater
operator 8 (x <= y) less_equal
operator 8 (x >= y) greater_equal

operator 10 (x + y) add
operator 10 (x - y) subtract

operator 15 (x * y) multiply
operator 15 (x / y) divide
operator 15 (x % y) remainder

operator 15 (x << y) logical_shift_left
operator 15 (x >> y) logical_shift_right
operator 15 (x | y) bitwise_or
operator 15 (x & y) bitwise_and

operator 16 (- x) negate
operator 16 (& x) pointer_to

operator intrinsic 20 (@ x) eval
operator intrinsic 25 (~> x) fragment

operator intrinsic 30 (' x) quote
operator intrinsic 30 (x ') unquote

make_accessor :: fn(symbol : MASS.Symbol) => (MASS.Named_Accessor) intrinsic {
  meta :: import("std/meta")
  accessor := allocate(context.allocator, MASS.Named_Accessor)
  accessor.symbol = meta.reify(arguments.values.0, MASS.Symbol)
  meta.static_value(context.compilation, accessor, arguments.source_range)
}

operator intrinsic 30 (. x) make_accessor

quote :: fn(x) => (MASS.Quoted) MASS.quote
unquote :: @fn(x) MASS.unquote

pointer_to :: fn(type : Type) => (Type) {
  MASS.descriptor_pointer_to(MASS.allocator, type)
}
pointer_to :: fn(x) => (pointer_to(x)) MASS.pointer_to


add :: fn(x : s8, y : s8) => (s8) MASS.integer_add
subtract :: fn(x : s8, y : s8) => (s8) MASS.integer_subtract
multiply :: fn(x : s8, y : s8) => (s8) MASS.integer_multiply
divide :: fn(x : s8, y : s8) => (s8) MASS.integer_divide
remainder :: fn(x : s8, y : s8) => (s8) MASS.integer_remainder
negate :: fn(x : s8) -> (s8) { 0 - x }

less :: fn(x : s8, y : s8) => (bool) MASS.integer_less
less_equal :: fn(x : s8, y : s8) => (bool) MASS.integer_less_equal
greater :: fn(x : s8, y : s8) => (bool) MASS.integer_greater
greater_equal :: fn(x : s8, y : s8) => (bool) MASS.integer_greater_equal
equal :: fn(x : s8, y : s8) => (bool) MASS.integer_equal
not_equal :: fn(x : s8, y : s8) => (bool) MASS.integer_not_equal


template_signed_integer_overloads :: macro(template, impl) {
  f :: template(impl, s64)
  f :: template(impl, s32)
  f :: template(impl, s16)
  f
}

template_unsigned_integer_overloads :: macro(template, impl) {
  f :: template(impl, u64)
  f :: template(impl, u32)
  f :: template(impl, u16)
  f :: template(impl, u8)
  f
}

template_integer_overloads :: macro(template, impl) {
  f :: template_signed_integer_overloads(template, impl)
  f :: template_unsigned_integer_overloads(template, impl)
  f
}

arithmetic_template :: macro(impl, type : Type) {
  fn(x : type, y : type) => (type) impl
}

add :: template_integer_overloads(arithmetic_template, MASS.integer_add)
subtract :: template_integer_overloads(arithmetic_template, MASS.integer_subtract)
multiply :: template_integer_overloads(arithmetic_template, MASS.integer_multiply)
divide :: template_integer_overloads(arithmetic_template, MASS.integer_divide)
remainder :: template_integer_overloads(arithmetic_template, MASS.integer_remainder)

comparison_template :: macro(impl, type : Type) {
  fn(x : type, y : type) => (bool) impl
}

less :: template_integer_overloads(comparison_template, MASS.integer_less)
less_equal :: template_integer_overloads(comparison_template, MASS.integer_less_equal)
greater :: template_integer_overloads(comparison_template, MASS.integer_greater)
greater_equal :: template_integer_overloads(comparison_template, MASS.integer_greater_equal)
equal :: template_integer_overloads(comparison_template, MASS.integer_equal)
not_equal :: template_integer_overloads(comparison_template, MASS.integer_not_equal)

equal :: fn(x, y : x) => (bool) MASS.generic_equal
not_equal :: fn(x, y : x) => (bool) MASS.generic_not_equal

add :: MASS.i64_add
subtract :: MASS.i64_subtract
signed_multiply :: MASS.i64_signed_multiply
unsigned_multiply :: MASS.i64_unsigned_multiply
signed_divide :: MASS.i64_signed_divide
unsigned_divide :: MASS.i64_unsigned_divide
signed_remainder :: MASS.i64_signed_remainder
unsigned_remainder :: MASS.i64_unsigned_remainder

i64_is_compile_positive :: macro(x : i64) {
  static_assert(x & 0x8000_0000_0000_0000 == 0, "i64 value must be positive for this operation")
}

multiply :: macro(x : i64, y : i64) {
  i64_is_compile_positive(x)
  i64_is_compile_positive(y)
  unsigned_multiply(x, y)
}
divide :: macro(x : i64, y : i64) {
  i64_is_compile_positive(x)
  i64_is_compile_positive(y)
  unsigned_divide(x, y)
}
remainder :: macro(x : i64, y : i64) {
  i64_is_compile_positive(x)
  i64_is_compile_positive(y)
  unsigned_remainder(x, y)
}

logical_shift_left :: MASS.i64_logical_shift_left
logical_shift_right :: MASS.i64_logical_shift_right
bitwise_or :: MASS.i64_bitwise_or
bitwise_and :: MASS.i64_bitwise_and

Allocator :: MASS.Allocator

allocate :: macro(allocator : &MASS.Allocator, type : Type) {
  cast(&type, MASS.allocator_allocate_bytes(
    allocator,
    type.bit_size.as_u64 / 8,
    type.bit_alignment.as_u64 / 8
  ))
}

Array :: fn(item : Type, length : i64) => (Type) {
  t := allocate(MASS.allocator, MASS.Descriptor)

  t.tag = MASS.Descriptor_Tag.Fixed_Size_Array
  t.bit_size = [item.bit_size.as_u64 * cast(u64, length)]
  t.bit_alignment = item.bit_alignment
  t.Fixed_Size_Array = [item, cast(u64, length)]
  t
}

multiply :: Array

external :: fn(
  library_name : String,
  symbol_name : String
) => (MASS.External_Symbol) {
  [library_name, symbol_name]
}

os :: MASS.Os
get_target_os :: fn() => (os._Type) intrinsic {
  meta :: import("std/meta")
  meta.static_value(context.compilation, &context.program.os, arguments.source_range)
}

syscall :: fn(number : i64) => (MASS.Syscall) { [number] }

negate :: template_signed_integer_overloads(macro(impl, type : Type) {
  macro(x : type) { 0 - x }
}, ())
negate :: fn(literal : i64) => (s64) {
  -cast(s64, literal)
}

