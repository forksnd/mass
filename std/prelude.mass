import :: fn(path : String) -> (MASS.Module) MASS.import
cast :: fn(type : Type, value) -> _ MASS.cast
startup :: fn(callback : fn() -> ()) -> () MASS.startup

Void :: type_of(())
debugger :: fn() -> () intrinsic {
  lazy_value_proc :: fn(
    context : &MASS.Context,
    builder : &MASS.Function_Builder,
    expected_result : &MASS.Expected_Result,
    source_range : &MASS.Source_Range,
    payload : &Void
  ) -> (&MASS.Value) {
    {
      instruction : MASS.Instruction
      instruction.tag = MASS.Instruction_Tag.Location
      instruction.Location.source_range = source_range.*
    }

    {
      instruction : MASS.Instruction
      instruction.tag = MASS.Instruction_Tag.Bytes
      instruction.Bytes.memory.0 = cast(i8, 0xcc)
      instruction.Bytes.length = cast(i8, 1)
      MASS.push_instruction(&builder.code_block, instruction);
    }

    value : &MASS.Value = allocate(context.allocator, MASS.Value)
    value.source_range = source_range.*
    value.descriptor = Void
    value.storage.tag = MASS.Storage_Tag.None
    value.storage.bit_size = value.descriptor.bit_size
    value
  }


  lazy_value := allocate(context.allocator, MASS.Lazy_Value)
  lazy_value.epoch = parser.epoch
  lazy_value.descriptor = Void
  lazy_value.proc = lazy_value_proc
  lazy_value.payload = 0

  meta :: import("std/meta")
  meta.static_value(context.compilation, lazy_value, arguments.source_range)
}


Symbol :: MASS.Symbol
true :: cast(bool, 1)
false :: cast(bool, 0)

// FIXME :NoReturn this is not really a `void`
assert :: fn(condition : bool, message := "Assertion failed\n") -> () {
  // TODO add something like MASS.intrinsic_assert or MASS.intrinsic_print
  //      that would be safe to call without a risk or circular dependencies
  // TODO also detect these kind of dependencies better
  //io :: import("std/io")
  if condition then {} else {
    //io.print(message)
    debugger()
  }
}

// FIXME :NoReturn this is not really a `void`
static_assert :: fn(condition : bool, message : String = "") => () MASS.static_assert

apply :: fn(symbol :: 'module, curly : MASS.Ast_Block) -> (MASS.Module) MASS.inline_module
apply :: fn(symbol :: 'exports, curly : MASS.Group_Square) -> () MASS.exports
// FIXME the return type here should be (MASS.Intrinsic_Proc) but that does not work atm
apply :: fn(symbol :: 'intrinsic, curly : MASS.Ast_Block) -> _ MASS.intrinsic
apply :: fn(symbol :: 'c_struct, curly : MASS.Group_Square) -> (Type) MASS.c_struct

// These need to be an overload of `apply` instead a regular function because
// it needs to parse the expression inside with the runtime epoch even in the case
// when it is called from a constant context
apply :: fn(symbol :: 'type_of, paren : MASS.Group_Paren) -> (Type) MASS.type_of
apply :: fn(symbol :: 'size_of, paren : MASS.Group_Paren) -> (i64) MASS.size_of

apply :: macro(type, tuple : MASS.Group_Square) { cast(type', tuple') }
apply :: fn(x, paren : MASS.Group_Paren) -> _ MASS.call

operator 7 (x == y) 'equal
operator 7 (x != y) 'not_equal

operator 8 (x < y) 'less
operator 8 (x > y) 'greater
operator 8 (x <= y) 'less_equal
operator 8 (x >= y) 'greater_equal

operator 10 (x + y) 'add
operator 10 (x - y) 'subtract

operator 15 (x * y) 'multiply
operator 15 (x / y) 'divide
operator 15 (x % y) 'remainder

operator 15 (x << y) 'logical_shift_left
operator 15 (x >> y) 'logical_shift_right
operator 15 (x | y) 'bitwise_or
operator 15 (x & y) 'bitwise_and

operator 16 (- x) 'negate
operator 16 (& x) 'pointer_to

operator 20 (@ x) MASS.eval
operator 30 (. x) MASS.named_accessor

pointer_to :: fn(type : Type) => (Type) MASS.pointer_to_type
pointer_to :: fn(x) -> (pointer_to(x)) MASS.pointer_to

make_arithmetic_operations_module :: macro(type : Type) {
  module {
    add :: fn(x : type, y : type) -> (type) MASS.integer_add
    subtract :: fn(x : type, y : type) -> (type) MASS.integer_subtract
    multiply :: fn(x : type, y : type) -> (type) MASS.integer_multiply
    divide :: fn(x : type, y : type) -> (type) MASS.integer_divide
    remainder :: fn(x : type, y : type) -> (type) MASS.integer_remainder
    negate :: fn(x : type) -> (type) { 0 - x }

    less :: fn(x : type, y : type) -> (bool) MASS.integer_less
    less_equal :: fn(x : type, y : type) -> (bool) MASS.integer_less_equal
    greater :: fn(x : type, y : type) -> (bool) MASS.integer_greater
    greater_equal :: fn(x : type, y : type) -> (bool) MASS.integer_greater_equal
    equal :: fn(x : type, y : type) -> (bool) MASS.integer_equal
    not_equal :: fn(x : type, y : type) -> (bool) MASS.integer_not_equal
  }
}

using make_arithmetic_operations_module(s8)
using make_arithmetic_operations_module(s16)
using make_arithmetic_operations_module(s32)
using make_arithmetic_operations_module(s64)
using make_arithmetic_operations_module(u8)
using make_arithmetic_operations_module(u16)
using make_arithmetic_operations_module(u32)
using make_arithmetic_operations_module(u64)

equal :: fn(x, y : x) -> (bool) MASS.generic_equal
not_equal :: fn(x, y : x) -> (bool) MASS.generic_not_equal
equal :: fn(x, y : x) => (bool) { equal(x, y) }
not_equal :: fn(x, y : x) => (bool) { not_equal(x, y) }

add :: MASS.i64_add
subtract :: MASS.i64_subtract
signed_multiply :: MASS.i64_signed_multiply
unsigned_multiply :: MASS.i64_unsigned_multiply
signed_divide :: MASS.i64_signed_divide
unsigned_divide :: MASS.i64_unsigned_divide
signed_remainder :: MASS.i64_signed_remainder
unsigned_remainder :: MASS.i64_unsigned_remainder

signed_less :: MASS.i64_signed_less
unsigned_less :: MASS.i64_unsigned_less
signed_less_equal :: MASS.i64_signed_less_equal
unsigned_less_equal :: MASS.i64_unsigned_less_equal
signed_greater :: MASS.i64_signed_greater
unsigned_greater :: MASS.i64_unsigned_greater
signed_greater_equal :: MASS.i64_signed_greater_equal
unsigned_greater_equal :: MASS.i64_unsigned_greater_equal

// TODO this should return twos complement and still `i64`
negate :: fn(literal : i64) => (s64) {
  -cast(s64, literal)
}

i64_is_compile_positive :: macro(x : i64) {
  static_assert(x & 0x8000_0000_0000_0000 == 0, "i64 value must be positive for this operation")
}

multiply :: macro(x : i64, y : i64) {
  i64_is_compile_positive(x)
  i64_is_compile_positive(y)
  unsigned_multiply(x, y)
}
divide :: macro(x : i64, y : i64) {
  i64_is_compile_positive(x)
  i64_is_compile_positive(y)
  unsigned_divide(x, y)
}
remainder :: macro(x : i64, y : i64) {
  i64_is_compile_positive(x)
  i64_is_compile_positive(y)
  unsigned_remainder(x, y)
}

logical_shift_left :: MASS.i64_logical_shift_left
logical_shift_right :: MASS.i64_logical_shift_right
bitwise_or :: MASS.i64_bitwise_or
bitwise_and :: MASS.i64_bitwise_and

Allocator :: MASS.Allocator

allocate :: macro(allocator : &MASS.Allocator, type : Type) {
  cast(&type, MASS.allocator_allocate_bytes(
    allocator,
    type.bit_size.as_u64 / 8,
    type.bit_alignment.as_u64 / 8
  ))
}

Array :: fn(item_type : Type, length : i64) -> (Type) intrinsic {
  meta :: import("std/meta")
  item_type := meta.reify(arguments.values.0, Type).*
  length := meta.reify(arguments.values.1, i64).*
  t := allocate(context.allocator, MASS.Descriptor)

  t.tag = MASS.Descriptor_Tag.Fixed_Size_Array
  t.bit_size = [item_type.bit_size.as_u64 * cast(u64, length)]
  t.bit_alignment = item_type.bit_alignment
  t.Fixed_Size_Array = [item_type, cast(u64, length)]

  meta.immediate(context.compilation, t, arguments.source_range)
}

multiply :: Array

external :: fn(
  library_name : String,
  symbol_name : String
) => (MASS.External_Symbol) {
  [library_name, symbol_name]
}

os :: MASS.Os
get_target_os :: fn() -> (os._Type) intrinsic {
  meta :: import("std/meta")
  meta.immediate(context.compilation, context.program.os, arguments.source_range)
}

syscall :: fn(number : i64) => (MASS.Syscall) { [number] }

