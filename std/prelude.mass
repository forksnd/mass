// TODO ..@condition should be parsed as an expression instead of a wildcard
syntax statement("if" ..@condition {}@then_branch) {
  () = if condition() then then_branch() else {}
}

// TODO ..@condition should be parsed as an expression instead of a wildcard
syntax statement("if" ..@condition {}@then_branch "else" {}@else_branch) {
  () = if condition() then then_branch() else else_branch()
}

// TODO think of a better solution
// It is a bit unfortunate that we have to define this wrapper,
// otherwise we match the block version of this which will fail
// parsing (@condition() then) as an expression
//syntax statement("if" ..@condition "then" {}@then_branch "else" {}@else_branch) (
  //if condition() then then_branch() else else_branch()
//)

syntax statement("while" ..@condition {}@body) {
  label _loop_start
  label placeholder _loop_end

  syntax statement("break") { goto _loop_end }
  syntax statement("continue") { goto _loop_start }
  if condition() {
    body(@scope)
    goto _loop_start
  }
  label _loop_end
}

syntax statement("for" ..@pre ";" ..@condition ";" ..@post {}@body) {
  pre();
  label _loop_start;
  label placeholder _loop_end;
  syntax statement("break") { goto _loop_end }
  syntax statement("continue") { goto _loop_start }
  if condition() {
    body(@scope);
    post();
    goto _loop_start;
  }
  label _loop_end;
}

syntax statement("debugger") { inline_machine_code_bytes(0xCC) }
syntax statement("goto" .@label) { inline_machine_code_bytes(0xE9, label()) }

String :: Slice
bool :: s8
true :: 1
false :: 0

mass :: import("mass")

Arithmetic_Proc :: fn(
  ctx : &mass.Execution_Context,
  view : mass.Value_View,
  payload : &void
) -> (&mass.Value)

arithmetic_overloads :: macro(impl : Arithmetic_Proc) {
  Type :: mass.Descriptor
  intrinsic :: @intrinsic {
    impl(@context, arguments, 0)
  }
  template :: macro(type : Type) {
    macro add(x : type, y : type) -> (type) { intrinsic(x, y) }
  }
  expand :: macro(t64 : Type, t32 : Type, t16 : Type, t8  : Type) {
    f :: template(t64)
    f :: template(t32)
    f :: template(t16)
    f :: template(t8)
    f
  }

  f :: expand(s64, s32, s16, s8)
  f :: expand(u64, u32, u16, u8)
  f
}

add :: arithmetic_overloads(mass.add)
subtract :: arithmetic_overloads(mass.subtract)
multiply :: arithmetic_overloads(mass.multiply)
divide :: arithmetic_overloads(mass.divide)
remainder :: arithmetic_overloads(mass.remainder)

operator 16 (- x) { negate(x) }
operator 16 (& x) { address_of(x) }

operator 15 (x << y) { logical_shift_left(x, y) }
operator 15 (x | y) { bitwise_or(x, y) }
operator 15 (x & y) { bitwise_and(x, y) }



fail :: {
  mass :: import("mass")
  @fn(context : &mass.Execution_Context, name : String, message : String) {
    result := context.result
    result.tag = mass.Result_Tag.Error
    result.Error.error.tag = mass.Error_Tag.User_Defined
    result.Error.error.User_Defined.name = name
    result.Error.error.detailed_message = message
    result.Error.error.source_range = @source_range
  }
}

static_assert :: macro(condition : bool, message : String) {
  @{if condition == false { fail(@context, "Static Assert Failed", message) }}
}

external :: {
  mass :: import("mass")
  @fn(library_name : String, symbol_name : String) -> (result : mass.External_Symbol) {
    result.library_name = library_name
    result.symbol_name = symbol_name
    result
  }
}

negate :: @fn(literal : Number_Literal) -> (Number_Literal) {
  literal.negative = if literal.negative then false else true
  literal
}










