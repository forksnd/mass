STDOUT_FILENO :: 1

Register :: MASS.Register

calling_convention_x86_64_system_v :: MASS.Calling_Convention [
  .call_setup_proc = MASS.calling_convention_x86_64_system_v_call_setup_proc,
  .register_volatile_bitset = [
    // Arguments
    (1 << zero_extend(i64, Register.DI)) | (1 << zero_extend(i64, Register.SI)) | (1 << zero_extend(i64, Register.D)) |
    (1 << zero_extend(i64, Register.C)) | (1 << zero_extend(i64, Register.R8)) | (1 << zero_extend(i64, Register.R9)) |
    // Varargs / Return
    (1 << zero_extend(i64, Register.A)) | (1 << zero_extend(i64, Register.D)) | // 'D' is used both for args and return
    // Other
    (1 << zero_extend(i64, Register.R10)) | (1 << zero_extend(i64, Register.R11))
  ]
]

SYSTEM_V_SYSCALL_MAX_PARAM_COUNT :: 6

x86_64_system_v_syscall_encode_proc :: fn(
  builder : &MASS.Function_Builder,
  address_storage : MASS.Storage,
  source_range : &MASS.Source_Range,
  scope : &MASS.Scope
) -> () {
  x86_64 :: import("std/x86_64")
  meta :: import("std/meta")

  rax := MASS.register_acquire(builder, .A)
  syscall_number := cast(&i64, meta.pointer_from_static_storage(&address_storage)).*

  // mov rax, imm64
  encoded_mov_bytes := x86_64.op1_plus_r64_imm64(0xB8, rax, syscall_number)
  MASS.push_instruction(&builder.code_block, [
    .scope = scope,
    .tag = .Bytes,
    .Bytes = encoded_mov_bytes,
  ])

  MASS.push_instruction(&builder.code_block, [
    .tag = .Bytes,
    .scope = scope,
    .Bytes = x86_64.syscall
  ])
  MASS.register_release(builder, .A);
}

calling_convention_x86_64_system_v_syscall_setup_proc :: fn(
  context : &MASS.Context,
  function : &MASS.Function_Info,
  header : &MASS.Function_Header
) -> (MASS.Function_Call_Setup) {
  using unsigned
  meta :: import("std/meta")

  allocator := context.allocator

  param_count := length(function.parameters)
  assert(param_count <= SYSTEM_V_SYSCALL_MAX_PARAM_COUNT)
  // TODO abstract this into dyn_array_make

  parameters_internal := dyn_array_make_internal(allocator, MASS.Function_Call_Parameter, SYSTEM_V_SYSCALL_MAX_PARAM_COUNT)

  result := MASS.Function_Call_Setup [
    .parameters_stack_size = 0,
    .call_encode_proc = x86_64_system_v_syscall_encode_proc,
    .calling_convention = &calling_convention_x86_64_system_v,
    .parameters = [.internal = parameters_internal],
    .parameter_registers_bitset = [0],
    .callee_return = meta.immediate_storage(0),
    .caller_return = meta.immediate_storage(0),
  ]
  return_descriptor := function.return_descriptor
  if return_descriptor.bit_size.as_u64 != 0 then {
    if return_descriptor.bit_size.as_u64 > 64 then {
      error : MASS.Error
      error.tag = .User_Defined
      error.User_Defined.name = "Syscall_Type_Too_Large"
      error.source_range = header.returns.source_range
      error.detailed_message = "Return type is too large too be used for a syscall"
      meta.context_error(context, error)
      return result
    }

    common_storage := MASS.storage_register(.A, return_descriptor.bit_size)
    result.callee_return = common_storage
    result.caller_return = common_storage
  }

  // FIXME making this a global results in wrong values inside
  calling_convention_x86_64_system_v_general_registers : (MASS.Register * SYSTEM_V_SYSCALL_MAX_PARAM_COUNT) = [
    .DI, .SI, .D, .R10, .R8, .R9
  ]

  registers := MASS.System_V_Register_State [
    .general = [
      .items = &calling_convention_x86_64_system_v_general_registers,
      .count = SYSTEM_V_SYSCALL_MAX_PARAM_COUNT,
      .index = 0,
    ],
    .vector = [
      .items = 0,
      .count = 0,
      .index = 0,
    ],
  ]

  stack_offset := 0
  param_index := 0
  while param_index != param_count {
    param := dyn_array_get(function.parameters, param_index)
    if param.tag != .Known then {
      classification := MASS.x86_64_system_v_classify(param.descriptor)
      // TODO figure out how item 6. Only values of class INTEGER or class MEMORY are passed to the kernel.
      //      can be understood together with the item 4. System-calls are limited to six arguments,
      //      no argument is passed directly on the stack. While in user space MEMORY class arguments
      //      are passed on the stack.
      if classification.class != .INTEGER then {
        // FIXME user error "Unsupported system V argument class in a syscall"
        assert(false)
      }
      if zero_extend(i64, registers.general.index) + classification.eightbyte_count > zero_extend(i64, registers.general.count) then {
        // FIXME user error System V syscall support no more than 6 arguments
        assert(false)
      }

      parameter := MASS.x86_64_system_v_parameter_for_classification(
        allocator, &registers, &classification, &stack_offset
      )
      parameter.original_index = param_index //:ParameterOriginalIndex
      // 4. System-calls are limited to six arguments, no argument is passed directly on the stack.
      dyn_array_push(result.parameters, parameter)
    }
    param_index = param_index + 1
  }

  assert(stack_offset == 0)
  MASS.call_setup_fill_parameter_register_bitset(&result)

  result
}

make_syscall :: fn(@signature : MASS.Function_Header, @number : i64) => (MASS.Function_Literal) {
  signature (intrinsic {
    meta :: import("std/meta")
    using unsigned
    // AMD64 ABI A.2.1.4
    // System-calls are limited to six arguments, no argument is passed directly on the stack.
    assert(length(signature.parameters) <= SYSTEM_V_SYSCALL_MAX_PARAM_COUNT)
    fn_info := allocate(context.allocator, MASS.Function_Info)
    MASS.function_info_init_for_header_and_maybe_body(context, parser.scope, &signature, 0, fn_info)
    if MASS.result_is_error(context.result) then return 0
    call_setup := calling_convention_x86_64_system_v_syscall_setup_proc(context, fn_info, &signature)
    if MASS.result_is_error(context.result) then return 0

    fn_descriptor := MASS.descriptor_function_instance(context.allocator, fn_info, call_setup, 0)
    storage := meta.immediate_storage(number)
    source_range := arguments.source_range
    overload := MASS.value_make(context, fn_descriptor, storage, source_range)

    call_payload := allocate(context.allocator, MASS.Function_Call_Lazy_Payload)
    call_payload.* = [
      .overload = overload,
      .args = arguments,
      .info = fn_info,
    ]

    lazy_value := allocate(context.allocator, MASS.Value)
    lazy_value.* = [
      .tag = .Lazy,
      .flags = .None,
      .descriptor = fn_info.return_descriptor,
      .source_range = source_range,
      .Lazy = [
        .is_factory = false,
        .scope = parser.scope,
        .epoch = parser.epoch,
        .proc = cast(MASS.Lazy_Value_Proc, MASS.call_function_overload),
        .payload = cast(&Void, call_payload),
      ],
    ]
    lazy_value
  })
}

PROT_NONE :: 0x00
PROT_READ :: 0x01
PROT_WRITE :: 0x02
PROT_EXEC :: 0x04

MAP_PRIVATE :: 0x02
MAP_ANONYMOUS :: 0x20

sys_mmap :: make_syscall((fn(
  address : &Void,
  length : u64,
  protection : i32,
  flags : i32,
  file_descriptor : s32,
  offsets : u64
) -> (&Void)), 9)

sys_write :: make_syscall((fn(descriptor : s32, buffer : &i8, size : i64) -> (s32)), 1)
sys_exit :: make_syscall((fn(status : s32) -> (s32)), 60)

