STDOUT_FILENO :: 1

Register :: MASS.Register

system_v_call_setup :: MASS.Calling_Convention [
  .call_setup_proc = MASS.calling_convention_x86_64_system_v_call_setup_proc,
  .register_volatile_bitset = [
    // Arguments
    (1 << zero_extend(i64, Register.DI)) | (1 << zero_extend(i64, Register.SI)) | (1 << zero_extend(i64, Register.D)) |
    (1 << zero_extend(i64, Register.C)) | (1 << zero_extend(i64, Register.R8)) | (1 << zero_extend(i64, Register.R9)) |
    // Varargs / Return
    (1 << zero_extend(i64, Register.A)) | (1 << zero_extend(i64, Register.D)) | // 'D' is used both for args and return
    // Other
    (1 << zero_extend(i64, Register.R10)) | (1 << zero_extend(i64, Register.R11))
  ]
]

make_syscall :: fn(@signature : MASS.Function_Header, @number : i64) => (MASS.Function_Literal) {
  signature (intrinsic {
    meta :: import("std/meta")
    using unsigned
    // AMD64 ABI A.2.1.4
    // System-calls are limited to six arguments, no argument is passed directly on the stack.
    assert(length(signature.parameters) <= 6)
    fn_info := allocate(context.allocator, MASS.Function_Info)
    MASS.function_info_init_for_header_and_maybe_body(context, parser.scope, &signature, 0, fn_info)
    if MASS.result_is_error(context.result) then return 0
    call_setup := MASS.calling_convention_x86_64_system_v_syscall_setup_proc(context.allocator, fn_info)

    fn_descriptor := MASS.descriptor_function_instance(context.allocator, fn_info, call_setup, 0)
    storage := meta.immediate_storage(number)
    source_range := arguments.source_range
    overload := MASS.value_make(context, fn_descriptor, storage, source_range)

    call_payload := allocate(context.allocator, MASS.Function_Call_Lazy_Payload)
    call_payload.* = [
      .overload = overload,
      .args = arguments,
      .info = fn_info,
    ]

    lazy_value := allocate(context.allocator, MASS.Value)
    lazy_value.* = [
      .tag = .Lazy,
      .flags = .None,
      .descriptor = fn_info.return_descriptor,
      .source_range = source_range,
      .Lazy = [
        .is_factory = false,
        .scope = parser.scope,
        .epoch = parser.epoch,
        .proc = cast(MASS.Lazy_Value_Proc, MASS.call_function_overload),
        .payload = cast(&Void, call_payload),
      ],
    ]
    lazy_value
  })
}

PROT_NONE :: 0x00
PROT_READ :: 0x01
PROT_WRITE :: 0x02
PROT_EXEC :: 0x04

MAP_PRIVATE :: 0x02
MAP_ANONYMOUS :: 0x20

sys_mmap :: make_syscall((fn(
  address : &Void,
  length : u64,
  protection : i32,
  flags : i32,
  file_descriptor : s32,
  offsets : u64
) -> (&Void)), 9)

sys_write :: make_syscall((fn(descriptor : s32, buffer : &i8, size : i64) -> (s32)), 1)
sys_exit :: make_syscall((fn(status : s32) -> (s32)), 60)

