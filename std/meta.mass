exports [
  .reify,
  .static_value,
  .immediate_storage,
  .immediate,
  .same_type,
  .context_error,
  .Value,
  .source_range_here,
  .pointer_from_static_storage
]

Value :: MASS.Value
Source_Range :: MASS.Source_Range
same_type :: MASS.same_type

context_error :: fn(context : &MASS.Context, error : MASS.Error) -> () {
  assert(context.compilation.result.tag == .Success)
  context.compilation.result.tag = .Error
  context.compilation.result.Error.error = error
}

pointer_from_static_storage :: fn(storage : &MASS.Storage) -> (&Void) {
  if storage.tag == .Static then {
    storage.Static.pointer
  } else if storage.tag == .Immediate then {
    &storage.Immediate.bits
  } else {
    assert(false)
    0
  }
}

pointer_from_static_value :: fn(value : &Value, type : Type) -> (&type_of(())) {
  assert(same_type(value.descriptor, type_descriptor(type)))
  assert(value.tag == .Forced)
  storage := &value.Forced.storage
  assert((value.descriptor.*).bit_size.as_u64 == storage.bit_size.as_u64)

  pointer_from_static_storage(storage)
}

static_value :: fn(
  compilation : &MASS.Compilation,
  pointer ~ is_pointer_type,
  source_range : Source_Range
) -> (&Value) {
  descriptor :: type_descriptor(type_of(pointer))
  static_assert(descriptor.tag == .Pointer_To)
  pointee_descriptor :: descriptor.Pointer_To.descriptor

  static_value := allocate(compilation.allocator, Value)
  static_value.tag = .Forced
  static_value.source_range = source_range
  static_value.descriptor = pointee_descriptor

  static_value.Forced.storage.tag = .Static
  static_value.Forced.storage.bit_size = pointee_descriptor.bit_size

  static_value.Forced.storage.Static.pointer = cast(&Void, pointer)

  static_value
}

immediate_storage :: fn(
  source
) -> (MASS.Storage) {
  type :: type_of(source)
  descriptor :: type_descriptor(type)
  type_bit_size :: descriptor.bit_size
  static_assert(type_bit_size <= 64, "Type is too large to fit into an immediate")

  storage := MASS.Storage [
    .tag = .Immediate,
    .flags = .None,
    .bit_size = type_bit_size,
    .Immediate = [.bits = 0],
  ]
  cast(type, storage.Immediate.bits) = source
  storage
}

immediate :: fn(
  compilation : &MASS.Compilation,
  source,
  source_range : Source_Range
) -> (&Value) {
  type :: type_of(source)
  descriptor :: type_descriptor(type)
  type_bit_size :: descriptor.bit_size
  static_assert(type_bit_size <= 64, "Type is too large to fit into an immediate")

  static_value := allocate(compilation.allocator, Value)
  static_value.tag = .Forced
  static_value.source_range = source_range
  static_value.descriptor = descriptor
  static_value.Forced.storage = immediate_storage(source)

  static_value
}

reify :: fn(value : &Value, @type : Type) -> _ {
  cast(&type, pointer_from_static_value(value, type))
}

source_range_here :: fn() -> (Source_Range) intrinsic {
  source_range_copy := make(context.allocator, arguments.source_range)
  static_value(context.compilation, source_range_copy, arguments.source_range)
}
